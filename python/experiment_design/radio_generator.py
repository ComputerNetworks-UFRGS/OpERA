#!/usr/bin/env python
__author__ = 'jtsreinaldo'

"""
Copyright 2013 OpERA

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
"""

import sys
import os
import yaml

from optparse import OptionParser

from radio_constants import *
from validation_constants import *


from transmission_config import TXConfigRadioGenerator
from reception_config import RXConfigRadioGenerator
from ss_config import SSConfigRadioGenerator


class RadioGenerator(object):
    """
    Class for generation of OpeERA scripts.
    """


    def __init__(self):
        """
        """
        pass

    def check_valid_parameters(self, yaml_data):
        """
        Check if the values in the yaml are valid. If some of them isn't, raise an exception.
        @param yaml_data The yaml extracted data (a dictionary).
        """

        exception = False
        exception_str = None

        for configuration in VALIDS:
            for type_of_configuration in VALIDS[configuration]:

                # We have default parameters, so some of the parameters we want may not be in the yaml file. In this
                # case, we will use the default value, but an exception shouldn't be raised because there are missing
                # parameters.
                try:
                    if yaml_data[configuration][type_of_configuration] not in VALIDS[configuration][
                        type_of_configuration]:
                        print type_of_configuration
                        exception_str = "The value of the %s key is invalid! \n\t   Possible values for %s: " \
                                        % (type_of_configuration, type_of_configuration)
                        exception_str += str(VALIDS[configuration][type_of_configuration])

                        exception = True

                except:
                    if exception is True:
                        raise Exception(exception_str)

    def check_correct_types(self, yaml_data):
        """
        Check if the types of parameters that don't have value restrictions are correct.
        @param yaml_data
        """

        exception = False
        exception_str = None

        for configuration in VALID_TYPES:
            print "\nconfiguration = %s" % (configuration)

            for value_type in VALID_TYPES[configuration]:
                print "attribute = %s" % (value_type)

                try:

                    # If the value in the yaml_data is not an instance of the correspondent type in the dictionary,
                    # raise an exception
                    
                    if not isinstance(yaml_data[configuration][value_type], VALID_TYPES[configuration][value_type]):
                        exception_str = "The type of the key %s is invalid!\n\t The type must be: %s" \
                                        % (value_type, str(VALID_TYPES[configuration][value_type]))

                        exception = True


                except:
                    if exception is True:
                        raise Exception(exception_str)


    def radio_generator(self, yaml_file):
        """
        Executes the script generator for all radios.
        @param yaml_file The dictionary generated by loading the yaml file.
        """

        PYTHON_EXT = ".py"

        from ss_tx_template import SS_TX_TEMPLATE

        yaml_stream = open(yaml_file, 'r')
        data = yaml.load(yaml_stream)

        radio_names = []

        for radio_name in data:

            radio = data[radio_name]

            self.check_valid_parameters(radio)
            self.check_correct_types(radio)

            ss_type, ss_detector, ss_source = SSConfigRadioGenerator.ss_generator(radio)
            tx_type, tx_arch, tx_sink = TXConfigRadioGenerator.tx_generator(radio)
            rx_type, rx_arch, rx_sink = RXConfigRadioGenerator.rx_generator(radio)

            script = SS_TX_TEMPLATE.format(ss_type=ss_type,
                                           ss_detector=ss_detector,
                                           ss_source=ss_source,
                                           tx_type=tx_type,
                                           tx_arch=tx_arch,
                                           tx_sink=tx_sink,
                                           rx_type=rx_type,
                                           rx_arch=rx_arch,
                                           rx_sink=rx_sink)

            output_filename = radio_name  # The output file name is the name given for the 'instance'.

            # If no input is given, the file will be named "out_file.py".
            if output_filename is None:
                output_filename = "out_file"

            # Gets the 3 last characters of the output filename.
            file_ext = output_filename[(len(output_filename) - 3):len(output_filename)]

            # Verifies if it DOES NOT have .py extension
            if file_ext != PYTHON_EXT:
                # If it doesn't, adds the python extension to the output filename.
                output_filename += PYTHON_EXT

            out_file = open(output_filename, "w+")
            out_file.write(script)
            out_file.close()

            radio_names.append(output_filename)

        print "\nYour spectrum sensing files have been generated with the following names:"
        for r_name in radio_names:
            print "\n\t\t%s" % (r_name)

        print "\n"


def main():
    """ Main function. """

    parser = OptionParser()
    parser.add_option("-f", "--file", type="string", default="config_file.yaml",
                      help="The YAML file name.", dest="yaml_file")
    (options, args) = parser.parse_args()

    yaml_file = options.yaml_file

    rg = RadioGenerator()

    rg.radio_generator(yaml_file)


if __name__ == "__main__":
    main()
